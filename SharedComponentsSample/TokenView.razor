@inject BlazoradeMsalService msalService

@code {

    private string scopeString = null;
    private string loginHint = null;
    private AuthenticationResult token = null;


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && null == this.token)
        {
            try
            {
                this.token = await this.msalService.AcquireTokenSilentAsync();
                this.SetUIFromToken();
            }
            catch { }
        }
    }

    private async Task GetTokenAsync(MouseEventArgs e)
    {
        var scopes = (this.scopeString ?? "").Split(',');
        this.token = await this.msalService.AcquireTokenAsync(loginHint: this.loginHint, scopes: scopes);
        this.SetUIFromToken();
    }

    private async Task LogoutAsync(MouseEventArgs e)
    {
        await this.msalService.LogoutAsync();
    }

    private void SetUIFromToken()
    {
        if (null != this.token)
        {
            this.loginHint = this.token.IdTokenClaims["preferred_username"]?.ToString();
            this.scopeString = string.Join(',', this.token.Scopes);
            this.StateHasChanged();
        }
    }

}

<div class="input-group">
    <input type="text" name="login-hint" class="form-control" placeholder="Type in a login hint" @bind-value="this.loginHint" @bind-value:event="oninput" />
    <input type="text" name="scopes" class="form-control" placeholder="Comma-separated list of tokens to acquire" @bind-value="this.scopeString" @bind-value:event="oninput" />
    <div class="input-group-append">
        <button type="button" class="btn btn-primary" @onclick="this.GetTokenAsync">Get Token</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="this.LogoutAsync">Log Out</button>
    </div>
</div>

@if (null != this.token)
{
    <h2>Token for: @this.token.Account?.Name</h2>
    <ul>
        <li>Account Name: @this.token.Account?.Name</li>
        <li>Account Username: @this.token.Account?.UserName</li>
        <li>Authority: @this.token.Authority</li>
        <li>Expires On: @this.token.ExpiresOn</li>
        <li>Scopes: @string.Join(", ", this.token.Scopes?.ToArray() ?? new string[0])</li>
        <li>Access Token: @this.token.AccessToken</li>
        <li>Id Token: @this.token.IdToken</li>
    </ul>
}