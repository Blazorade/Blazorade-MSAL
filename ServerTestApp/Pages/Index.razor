@page "/"
@inject BlazoradeMsalOptions appOptions
@inject BlazoradeMsalService msalService

@code{
    string loginHint;
    string scopeString;
    AuthenticationResult token;

    private async Task LoginClickAsync(MouseEventArgs e)
    {
        IEnumerable<string> scopes = this.scopeString?.Length > 0 ? this.scopeString.Split(",", options: StringSplitOptions.RemoveEmptyEntries) : null;
        this.token = await msalService.AcquireTokenAsync(loginHint: this.loginHint, scopes: scopes);
        this.SetUIDataFromToken();
    }

    private async Task LogoutAsync(MouseEventArgs e)
    {
        await this.msalService.LogoutAsync();
        this.StateHasChanged();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                this.token = await this.msalService.AcquireTokenSilentAsync();
                this.SetUIDataFromToken();
            }
            catch { }
        }
    }

    private void SetUIDataFromToken()
    {
        if (null != this.token)
        {
            this.loginHint = this.token.IdTokenClaims["preferred_username"]?.ToString();

            if (string.IsNullOrEmpty(this.scopeString))
            {
                this.scopeString = string.Join(",", this.token.Scopes);
            }

            this.StateHasChanged();
        }
    }
}


<h1>Hello, world!</h1>

Welcome to your new app.

<p>
    ClientId: @this.appOptions.ClientId
</p>

<hr />

<button class="btn btn-outline-secondary" @onclick="this.LogoutAsync">Log out</button>
<hr />

<div class="form-group">
    <input id="login-hint" type="text" name="login-hint" class="form-control" placeholder="Login hint" @bind-value="this.loginHint" @bind-value:event="oninput" />
</div>

<div class="input-group">
    <input name="scopes" type="text" class="form-control" placeholder="Comma-separated list of scopes." @bind-value="this.scopeString" @bind-value:event="oninput" />
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="this.LoginClickAsync">Get Token</button>
    </div>
</div>

@if (null != this.token)
{
    <h2>Token for: @this.token.Account?.Name</h2>
    <ul>
        <li>Account Name: @this.token.Account?.Name</li>
        <li>Account Username: @this.token.Account?.UserName</li>
        <li>Authority: @this.token.Authority</li>
        <li>Expires On: @this.token.ExpiresOn</li>
        <li>Scopes: @string.Join(", ", this.token.Scopes?.ToArray() ?? new string[0])</li>
        <li>Access Token: @this.token.AccessToken</li>
        <li>Id Token: @this.token.IdToken</li>
    </ul>
}